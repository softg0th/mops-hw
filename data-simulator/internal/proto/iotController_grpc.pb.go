// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.29.2
// source: iotController.proto

package iot_controller

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	IotService_StreamWithAck_FullMethodName = "/iotController.IotService/StreamWithAck"
)

// IotServiceClient is the client API for IotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IotServiceClient interface {
	StreamWithAck(ctx context.Context, opts ...grpc.CallOption) (IotService_StreamWithAckClient, error)
}

type iotServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIotServiceClient(cc grpc.ClientConnInterface) IotServiceClient {
	return &iotServiceClient{cc}
}

func (c *iotServiceClient) StreamWithAck(ctx context.Context, opts ...grpc.CallOption) (IotService_StreamWithAckClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &IotService_ServiceDesc.Streams[0], IotService_StreamWithAck_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &iotServiceStreamWithAckClient{ClientStream: stream}
	return x, nil
}

type IotService_StreamWithAckClient interface {
	Send(*GetPackageRequest) error
	Recv() (*PackageResponse, error)
	grpc.ClientStream
}

type iotServiceStreamWithAckClient struct {
	grpc.ClientStream
}

func (x *iotServiceStreamWithAckClient) Send(m *GetPackageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *iotServiceStreamWithAckClient) Recv() (*PackageResponse, error) {
	m := new(PackageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IotServiceServer is the server API for IotService service.
// All implementations must embed UnimplementedIotServiceServer
// for forward compatibility
type IotServiceServer interface {
	StreamWithAck(IotService_StreamWithAckServer) error
	mustEmbedUnimplementedIotServiceServer()
}

// UnimplementedIotServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIotServiceServer struct {
}

func (UnimplementedIotServiceServer) StreamWithAck(IotService_StreamWithAckServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamWithAck not implemented")
}
func (UnimplementedIotServiceServer) mustEmbedUnimplementedIotServiceServer() {}

// UnsafeIotServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IotServiceServer will
// result in compilation errors.
type UnsafeIotServiceServer interface {
	mustEmbedUnimplementedIotServiceServer()
}

func RegisterIotServiceServer(s grpc.ServiceRegistrar, srv IotServiceServer) {
	s.RegisterService(&IotService_ServiceDesc, srv)
}

func _IotService_StreamWithAck_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IotServiceServer).StreamWithAck(&iotServiceStreamWithAckServer{ServerStream: stream})
}

type IotService_StreamWithAckServer interface {
	Send(*PackageResponse) error
	Recv() (*GetPackageRequest, error)
	grpc.ServerStream
}

type iotServiceStreamWithAckServer struct {
	grpc.ServerStream
}

func (x *iotServiceStreamWithAckServer) Send(m *PackageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *iotServiceStreamWithAckServer) Recv() (*GetPackageRequest, error) {
	m := new(GetPackageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IotService_ServiceDesc is the grpc.ServiceDesc for IotService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IotService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "iotController.IotService",
	HandlerType: (*IotServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamWithAck",
			Handler:       _IotService_StreamWithAck_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "iotController.proto",
}
